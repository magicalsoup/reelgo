//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Attractions = newAttractionsTable("public", "attractions", "")

type attractionsTable struct {
	postgres.Table

	// Columns
	UID                postgres.ColumnInteger
	Tid                postgres.ColumnInteger
	Aid                postgres.ColumnInteger
	AttractionName     postgres.ColumnString
	AttractionLocation postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AttractionsTable struct {
	attractionsTable

	EXCLUDED attractionsTable
}

// AS creates new AttractionsTable with assigned alias
func (a AttractionsTable) AS(alias string) *AttractionsTable {
	return newAttractionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AttractionsTable with assigned schema name
func (a AttractionsTable) FromSchema(schemaName string) *AttractionsTable {
	return newAttractionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AttractionsTable with assigned table prefix
func (a AttractionsTable) WithPrefix(prefix string) *AttractionsTable {
	return newAttractionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AttractionsTable with assigned table suffix
func (a AttractionsTable) WithSuffix(suffix string) *AttractionsTable {
	return newAttractionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAttractionsTable(schemaName, tableName, alias string) *AttractionsTable {
	return &AttractionsTable{
		attractionsTable: newAttractionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAttractionsTableImpl("", "excluded", ""),
	}
}

func newAttractionsTableImpl(schemaName, tableName, alias string) attractionsTable {
	var (
		UIDColumn                = postgres.IntegerColumn("uid")
		TidColumn                = postgres.IntegerColumn("tid")
		AidColumn                = postgres.IntegerColumn("aid")
		AttractionNameColumn     = postgres.StringColumn("attraction_name")
		AttractionLocationColumn = postgres.StringColumn("attraction_location")
		allColumns               = postgres.ColumnList{UIDColumn, TidColumn, AidColumn, AttractionNameColumn, AttractionLocationColumn}
		mutableColumns           = postgres.ColumnList{AttractionNameColumn, AttractionLocationColumn}
	)

	return attractionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UID:                UIDColumn,
		Tid:                TidColumn,
		Aid:                AidColumn,
		AttractionName:     AttractionNameColumn,
		AttractionLocation: AttractionLocationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
