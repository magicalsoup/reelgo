//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VerificationCodes = newVerificationCodesTable("public", "verification_codes", "")

type verificationCodesTable struct {
	postgres.Table

	// Columns
	Vid         postgres.ColumnInteger
	UID         postgres.ColumnInteger
	InstagramID postgres.ColumnString
	Code        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VerificationCodesTable struct {
	verificationCodesTable

	EXCLUDED verificationCodesTable
}

// AS creates new VerificationCodesTable with assigned alias
func (a VerificationCodesTable) AS(alias string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VerificationCodesTable with assigned schema name
func (a VerificationCodesTable) FromSchema(schemaName string) *VerificationCodesTable {
	return newVerificationCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VerificationCodesTable with assigned table prefix
func (a VerificationCodesTable) WithPrefix(prefix string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VerificationCodesTable with assigned table suffix
func (a VerificationCodesTable) WithSuffix(suffix string) *VerificationCodesTable {
	return newVerificationCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVerificationCodesTable(schemaName, tableName, alias string) *VerificationCodesTable {
	return &VerificationCodesTable{
		verificationCodesTable: newVerificationCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newVerificationCodesTableImpl("", "excluded", ""),
	}
}

func newVerificationCodesTableImpl(schemaName, tableName, alias string) verificationCodesTable {
	var (
		VidColumn         = postgres.IntegerColumn("vid")
		UIDColumn         = postgres.IntegerColumn("uid")
		InstagramIDColumn = postgres.StringColumn("instagram_id")
		CodeColumn        = postgres.StringColumn("code")
		allColumns        = postgres.ColumnList{VidColumn, UIDColumn, InstagramIDColumn, CodeColumn}
		mutableColumns    = postgres.ColumnList{UIDColumn, InstagramIDColumn, CodeColumn}
	)

	return verificationCodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Vid:         VidColumn,
		UID:         UIDColumn,
		InstagramID: InstagramIDColumn,
		Code:        CodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
